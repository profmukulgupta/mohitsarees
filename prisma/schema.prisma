// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  firstName     String?
  lastName      String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  phone         String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  role          Role      @default(CUSTOMER)
  isActive      Boolean   @default(true)
  
  // Relations
  accounts      Account[]
  sessions      Session[]
  addresses     Address[]
  orders        Order[]
  wishlist      WishlistItem[]
  paymentMethods PaymentMethod[]
  cart          CartItem[]
  
  // Notification preferences
  notificationPreferences NotificationPreferences?

  @@index([email])
  @@index([role])
  @@index([isActive])
}

model NotificationPreferences {
  id            String    @id @default(cuid())
  userId        String    @unique
  orderUpdates  Boolean   @default(true)
  promotions    Boolean   @default(true)
  newArrivals   Boolean   @default(false)
  blogPosts     Boolean   @default(true)
  
  // Relations
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Address {
  id        String   @id @default(cuid())
  userId    String
  type      String   // Home, Office, etc.
  name      String
  address   String
  city      String
  state     String
  pincode   String
  phone     String
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders    Order[]

  @@index([userId])
  @@index([isDefault])
}

model PaymentMethod {
  id        String   @id @default(cuid())
  userId    String
  type      String   // Credit Card, UPI, etc.
  name      String
  number    String
  expiry    String?
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isDefault])
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float
  salePrice   Float?
  imageUrls   String   // Will store JSON string of image URLs
  category    String
  tags        String   // Will store JSON string of tags
  stock       Int      @default(0)
  sku         String?  @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isActive    Boolean  @default(true)
  
  // Relations
  orderItems  OrderItem[]
  wishlistItems WishlistItem[]
  cartItems   CartItem[]

  @@index([category])
  @@index([isActive])
  @@index([stock])
}

model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int
  size      String?
  color     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([userId, productId, size, color])
  @@index([userId])
  @@index([productId])
}

model Order {
  id              String    @id @default(cuid())
  userId          String
  orderNumber     String    @unique
  status          OrderStatus @default(PENDING)
  total           Float
  subtotal        Float
  tax             Float
  shipping        Float
  paymentMethod   String
  paymentStatus   PaymentStatus @default(PENDING)
  deliveryMethod  DeliveryMethod @default(HOME_DELIVERY)
  addressId       String?
  notes           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Tracking information
  trackingNumber  String?
  trackingEvents  TrackingEvent[]
  
  // Relations
  user            User      @relation(fields: [userId], references: [id])
  address         Address?  @relation(fields: [addressId], references: [id])
  items           OrderItem[]
  
  // Audit trail
  statusHistory   OrderStatusHistory[]
  
  @@index([userId])
  @@index([orderNumber])
  @@index([status])
  @@index([paymentStatus])
  @@index([createdAt])
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  size      String?
  color     String?
  
  // Relations
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])
  
  @@index([orderId])
  @@index([productId])
}

model TrackingEvent {
  id          String   @id @default(cuid())
  orderId     String
  date        DateTime @default(now())
  status      String
  description String?
  location    String?
  
  // Relations
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  @@index([orderId])
  @@index([date])
}

model OrderStatusHistory {
  id          String      @id @default(cuid())
  orderId     String
  status      OrderStatus
  timestamp   DateTime    @default(now())
  notes       String?
  updatedBy   String?     // User ID or name who made the change
  
  // Relations
  order       Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  @@index([orderId])
  @@index([timestamp])
}

model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])
  
  @@unique([userId, productId])
  @@index([userId])
  @@index([productId])
}

enum Role {
  ADMIN
  STAFF
  CUSTOMER
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum DeliveryMethod {
  HOME_DELIVERY
  STORE_PICKUP
}

